{"version":3,"sources":["components/value.js","components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["components_value","document","nodes","object","type","leaves","text","title","storedValue","JSON","parse","localStorage","getItem","value","Value","fromJSON","initialValue","DEFAULT_NODE","schema","last","normalize","editor","_ref","code","node","paragraph","Block","create","insertNodeByKey","key","size","blocks","image","isVoid","insertImage","src","target","select","insertBlock","data","convertTo","options","onKeyDown","event","next","ctrlKey","preventDefault","toggleMark","plugins","MyEditor","state","nodeLimit","saveDisabled","onChange","_ref2","_this","setState","blockSize","getBlocks","ref","hasBlock","some","renderConvertTo","name","react_default","a","createElement","onMouseDown","activateMark","className","concat","renderBlockTo","parent","getParent","first","onClick","activateBlock","id","file","Object","assertThisInitialized","prompt","command","currentTarget","files","Promise","resolve","reject","reader","FileReader","includes","readAsDataURL","onload","result","onerror","error","window","alert","then","imageData","isActive","setBlocks","unwrapBlock","isList","isType","block","getClosest","wrapBlock","renderMark","props","mark","attributes","children","renderNode","get","assign","shiftKey","getDepth","firstBlockDepth","multiLevelSelected","map","currentKey","currentDepth","depth","onlyList","saveContent","content","stringify","toJSON","setItem","restoreContent","updateNodeLimit","parseInt","limit","this","slate_react_es","autoFocus","spellCheck","placeholder","onSubmit","action","method","defaultValue","disabled","Component","App","Editor_MyEditor","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e790557c.chunk.js","sourcesContent":["export default {\n  document: {\n    nodes: [\n      {\n        object: 'block',\n        type: 'paragraph',\n        nodes: [\n          {\n            object: 'text',\n            leaves: [\n              {\n                text: ''\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n};\n","import React, { Component } from 'react';\nimport {Editor} from 'slate-react';\nimport {Block, Value} from 'slate';\nimport initialValue from './value';\n\ndocument.title = 'Rich text Editor';\n\nconst storedValue = JSON.parse(localStorage.getItem('content'));\nconst value = Value.fromJSON(storedValue || initialValue);\nconst DEFAULT_NODE = 'paragraph';\nconst schema = {\n    document: {\n        last: {type: 'paragraph'},\n        normalize: (editor, {code, node}) => {\n            switch (code) {\n                case 'last_child_type_invalid': {\n                    const paragraph = Block.create('paragraph');\n                    return editor.insertNodeByKey(node.key, node.nodes.size, paragraph);\n                }\n            }\n        }\n    },\n    blocks: {\n        image: {\n            isVoid: true\n        }\n    }\n};\n\nfunction insertImage(editor, src, target) {\n    if (target) {\n        editor.select(target);\n    }\n\n    editor.insertBlock({\n        type: 'image',\n        data: {src}\n    });\n}\n\nfunction convertTo(options) {\n    let {key, type} = options;\n    return {\n        onKeyDown(event, editor, next) {\n            if (!event.ctrlKey || event.key !== key) return next();\n            event.preventDefault();\n            editor.toggleMark(type);\n        }\n    };\n}\n\nconst plugins = [\n    convertTo({key: 'b', type: 'bold'}),\n    convertTo({key: 'i', type: 'italic'}),\n    convertTo({key: 'u', type: 'underline'}),\n    convertTo({key: '-', type: 'strikethrough'}),\n    convertTo({key: '`', type: 'code'})\n];\n\n\nexport default class MyEditor extends Component {\n    state = {\n        value: value,\n        nodeLimit: '',\n        saveDisabled: false\n    };\n\n    onChange = ({value}) => {\n        this.setState({value});\n        let blockSize = this.editor.value.document.getBlocks().size;\n        let {nodeLimit} = this.state;\n        let saveDisabled;\n        if (nodeLimit !== '' && blockSize > nodeLimit) {\n            saveDisabled = true;\n        } else {\n            saveDisabled = false;\n        }\n\n        this.setState({saveDisabled});\n    };\n\n    ref = (editor) => (this.editor = editor);\n\n    hasBlock = (type) => {\n        let {value} = this.state;\n        return value.blocks.some((node) => node.type === type);\n    };\n\n    renderConvertTo = (type, name) => {\n        return (\n            <button\n                onMouseDown={(event) => this.activateMark(event, type)}\n                title={type}>\n                <i className={`fa ${name}`}/>\n            </button>\n        );\n    };\n\n    renderBlockTo = (type, name) => {\n        let isActive = this.hasBlock(type);\n\n        if (type === 'numbered-list' || type === 'bulleted-list') {\n            let {value} = this.state;\n            if (value.blocks.size > 0) {\n                let parent = value.document.getParent(value.blocks.first().key);\n                isActive = this.hasBlock('list-item') && parent && parent.type === type;\n            }\n        }\n\t\n\t\tif (name === 'H1' || name === 'H2') {\n            return(\n            <button title={type} onClick={(event) => this.activateBlock(event, type)}>\n                {name}\n            </button>)\n        }\n\t\t\n\t\t\tif (type === 'imageBrowser') {\n            return (\n                <div className=\"upload-btn-wrapper\">\n                    <button title={type}>\n                        <input\n                            type=\"file\"\n                            id=\"input-button\"\n                            onChange={(event) => this.activateBlock(event, type)}\n                        />\n                        <i className={`fa ${name}`}/>\n                    </button>\n                </div>\n            );\n        }\n\n        return (\n            <button title={type} onClick={(event) => this.activateBlock(event, type)}>\n                <i className={`fa ${name}`}/>\n            </button>\n        );\n    };\n\n    activateMark = (event, type) => {\n        event.preventDefault();\n        this.editor.toggleMark(type);\n    };\n\n    activateBlock = (event, type) => {\n        event.preventDefault();\n\n        const {editor} = this;\n        const {value} = editor;\n        const {document} = value;\n\n        if (type === 'image') {\n            // Show URl prompt\n            let src = prompt('Please enter an image url: ');\n            if (!src) return;\n            editor.command(insertImage, src);\n        }\n\n        if (type === 'imageBrowser') {\n            const getBase64 = (file) =>\n                new Promise((resolve, reject) => {\n                    const reader = new FileReader();\n                    const allowedTypes = [\n                        'image/jpeg',\n                        'image/jpg',\n                        'image/png',\n                        'image/gif'\n                    ];\n                    if (!allowedTypes.includes(file.type)) {\n                        window.alert('Only jpg, png & gif image files are allowed!');\n                        return;\n                    }\n                    reader.readAsDataURL(file);\n                    reader.onload = () => resolve(reader.result);\n                    reader.onerror = (error) => reject(error);\n                });\n            getBase64(event.currentTarget.files[0]).then((imageData) => {\n                editor.command(insertImage, imageData);\n            });\n        }\n\n        // Handle everything but list buttons.\n        if (type !== 'bulleted-list' && type !== 'numbered-list') {\n            const isActive = this.hasBlock(type);\n            const isList = this.hasBlock('list-item');\n\n            if (isList) {\n                editor\n                    .setBlocks(isActive ? DEFAULT_NODE : type)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            } else {\n                editor.setBlocks(isActive ? DEFAULT_NODE : type);\n            }\n        } else {\n            // Handle the extra wrapping required for list buttons.\n            const isList = this.hasBlock('list-item');\n            const isType = value.blocks.some(\n                (block) =>\n                    !!document.getClosest(block.key, (parent) => parent.type === type)\n            );\n\n            if (isList && isType) {\n                editor\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            } else if (isList) {\n                editor\n                    .unwrapBlock(\n                        type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list'\n                    )\n                    .wrapBlock(type);\n            } else {\n                editor.setBlocks('list-item').wrapBlock(type);\n            }\n        }\n    };\n\n    // Render Mark Function\n    renderMark = (props, editor, next) => {\n        let {mark, attributes, children} = props;\n        switch (mark.type) {\n            case 'bold':\n                return <strong {...attributes}>{children}</strong>;\n            case 'italic':\n                return <em {...attributes}>{children}</em>;\n            case 'underline':\n                return <u {...attributes}>{children}</u>;\n            case 'code':\n                return <code {...attributes}>{children}</code>;\n            case 'strikethrough':\n                return <del {...attributes}>{children}</del>;\n            default:\n                return next();\n        }\n    };\n\n    // Render Node Function\n    renderNode = (props, editor, next) => {\n        let {node, attributes, children} = props;\n        switch (node.type) {\n            case 'heading-one':\n                return <h1 {...attributes}>{children}</h1>;\n            case 'heading-two':\n                return <h2 {...attributes}>{children}</h2>;\n            case 'paragraph':\n                return <p {...attributes}>{children}</p>;\n            case 'blockquote':\n                return <blockquote {...attributes}>{children}</blockquote>;\n            case 'bulleted-list':\n                return <ul {...attributes}>{children}</ul>;\n            case 'numbered-list':\n                return <ol {...attributes}>{children}</ol>;\n            case 'list-item':\n                return <li {...attributes}>{children}</li>;\n            case 'code':\n                return (\n                    <pre {...attributes}>\n            <code>{children}</code>\n          </pre>\n                );\n             case 'image':\n                let src = node.data.get('src');\n                return <img src={src} {...attributes} />;\n\n             default:\n                return next();\n        }\n    };\n\n    onKeyDown = (event, editor, next) => {\n        // Do nothing if it's not a list item.\n        let isList = this.hasBlock('list-item');\n\n        if (!isList) {\n            return next();\n        }\n\n        const {value} = editor;\n        const {document} = value;\n\n        const block = value.blocks.first();\n        const parent = block ? document.getParent(block.key) : null;\n\n        if (!event.shiftKey && event.key === 'Tab') {\n            event.preventDefault();\n\n            const type = !parent.type ? 'bulleted-list' : parent.type;\n\n            // check whether it's already in 3rd level\n            const depth = document.getDepth(block.key);\n            if (depth > 3) {\n                event.preventDefault();\n                return next();\n            }\n\n            if (parent) {\n                editor.setBlocks('list-item').wrapBlock(type);\n            }\n        }\n\n        if (event.shiftKey && event.key == 'Tab') {\n            event.preventDefault();\n\n            // if multi level list items are selected for shift+tab, then return\n            const firstBlockDepth = block && document.getDepth(block.key);\n            let multiLevelSelected = false;\n            value.blocks.map((currentKey) => {\n                const currentDepth = document.getDepth(currentKey.key);\n                multiLevelSelected = !!(firstBlockDepth !== currentDepth);\n                return true;\n            });\n            if (multiLevelSelected) return next();\n\n            // if first level list-items selected then, make paragraph\n            if (parent && typeof parent.type === 'undefined') {\n                editor\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n                return next();\n            }\n            const depth = document.getDepth(block.key);\n\n            const isActive =\n                this.hasBlock('list-item') &&\n                block &&\n                (parent.type === 'numbered-list' || parent.type === 'bulleted-list');\n\n            const onlyList = this.hasBlock('list-item');\n\n            if (isActive) {\n                editor\n                    .setBlocks('list-item')\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            } else if (isActive && depth <= 2) {\n                editor\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            } else {\n                editor\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            }\n            // Making sure we don't have an orphan list item\n            if (onlyList && depth <= 2) {\n                editor\n                    .setBlocks(DEFAULT_NODE)\n                    .unwrapBlock('list-item')\n                    .unwrapBlock('bulleted-list')\n                    .unwrapBlock('numbered-list');\n            }\n        }\n\n        return next();\n    };\n\n\n    // Save content\n    saveContent = () => {\n        let content = JSON.stringify(this.state.value.toJSON());\n        localStorage.setItem('content', content);\n    };\n\n    // Restore content\n    restoreContent = () => {\n        const storedValue = JSON.parse(localStorage.getItem('content'));\n        let value = Value.fromJSON(storedValue || initialValue);\n        this.setState({value});\n    };\n\n    updateNodeLimit = (event) => {\n        event.preventDefault();\n        let nodeLimit = parseInt(event.target.limit.value, 10);\n        let blockSize = this.editor.value.document.getBlocks().size;\n        let saveDisabled;\n        if (nodeLimit !== 0 && blockSize > nodeLimit) {\n            saveDisabled = true;\n        } else {\n            saveDisabled = false;\n        }\n        this.setState({nodeLimit, saveDisabled});\n    };\n\n    render() {\n        return (\n            <div id=\"editor-wrapper\">\n                <div id=\"header\">\n                    <div className=\"wrapper\">\n                        <div id=\"title-area\">\n                                <h2> Rich Text Editor</h2>\n                        </div>\n                        <div id=\"toolbar\">\n                            {this.renderConvertTo('bold', 'fa-bold')}\n                            {this.renderConvertTo('italic', 'fa-italic')}\n                            {this.renderConvertTo('underline', 'fa-underline')}\n                            {this.renderBlockTo('heading-one', 'H1')}\n                            {this.renderBlockTo('heading-two', 'H2')}\n                            {this.renderBlockTo('paragraph', 'fa-paragraph')}\n                            {this.renderBlockTo('blockquote', 'fa-quote-right')}\n                            {this.renderBlockTo('numbered-list', 'fa-list-ol')}\n                            {this.renderBlockTo('bulleted-list', 'fa-list-ul')}\n                            {this.renderBlockTo('image', 'fa-image')}\n                            {this.renderBlockTo('imageBrowser', 'fa-camera-retro')}\n                        </div>\n                    </div>\n                </div>\n                <div id=\"slate-editor\" className=\"wrapper\">\n                    <Editor\n                        ref={this.ref}\n                        autoFocus\n                        spellCheck={false}\n                        placeholder=\"Start writing..\"\n                        value={this.state.value}\n                        onChange={this.onChange}\n                        onKeyDown={this.onKeyDown}\n                        renderMark={this.renderMark}\n                        renderNode={this.renderNode}\n                        plugins={plugins}\n                        schema={schema}\n                    />\n                </div>\n                <div className=\"wrapper\">\n                    <div id=\"limiter\">\n                        <form onSubmit={this.updateNodeLimit} action=\"/\" method=\"POST\">\n                            Node limit:&nbsp;\n                            <input\n                                name=\"limit\"\n                                type=\"number\"\n                                defaultValue={0}\n                                className=\"input-number\"\n                            />\n                            <button>Set</button>\n                        </form>\n                    </div>\n                    <div id=\"menu\">\n                        <div className=\"buttons\">\n                            <button onClick={this.restoreContent}>Cancel</button>\n                            <button\n                                disabled={this.state.saveDisabled ? true : false}\n                                onClick={this.saveContent}>\n                                Save\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport MyEditor from './components/Editor';\n\nclass App extends Component {\n  render() {\n    return <MyEditor />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}